##
## Compilation
##

C++ = clang++ ;
LINK = clang++ ;

# If I was building a library, these would be useful
# LINKFLAGS = -shared ;
# if $(UNIX)      { SUFSHR = .so ; }
# else if $(NT)   { SUFSHR = .dll ; }
		
## Compiler arguments

# Arguments used on all projects, regardless of any variables
# BT_USE_DOUBLE_PRECISION solves the Dantzig LCP missing definition
C++FLAGS = -std=c++11 -Wall -Wextra -Wno-unused-parameter -DBT_USE_DOUBLE_PRECISION ;

HDRS = src bullet3/src base2.0 ;

# Enable debug symbols
ALLLIBSC++FLAGS = -g ;
# Required arguments for linux
# LINUXC++FLAGS = -g ;

OPTIM = -O0 ;

##
## Linking
##

LINKLIBS =
# Standard
-lpthread -ldl

# SFML
-lsfml-audio -lsfml-graphics -lsfml-window -lsfml-system

# Base
-Lbase2.0 -lBase20

# Bullet libraries
-Lbullet3/build_cmake/src/BulletDynamics
-Lbullet3/build_cmake/src/BulletCollision
-Lbullet3/build_cmake/src/Bullet3Common
-Lbullet3/build_cmake/src/LinearMath

-lBullet3Common
-lBulletDynamics
-lBulletCollision
-lLinearMath

# Stuff I'm not using, but could use
# -Lbullet3/build_cmake/src/BulletSoftBody
# -Lbullet3/build_cmake/src/BulletInverseDynamics
# -Lbullet3/build_cmake/src/Bullet3InverseDynamicsUtils
# -lBulletSoftBody
# -lBulletInverseDynamics
# -lBulletInverseDynamicsUtils
;

# LINKFLAGS = -Wl,-rpath,. ;

# TODO: Copy libs to better directory, or static link?
LINKFLAGS =
-Wl,-rpath,.:bullet3/build_cmake/src/BulletSoftBody:bullet3/build_cmake/Extras/InverseDynamics:bullet3/build_cmake/src/BulletInverseDynamics:bullet3/build_cmake/examples/ThirdPartyLibs/Gwen:bullet3/build_cmake/examples/ThirdPartyLibs/BussIK:bullet3/build_cmake/src/BulletDynamics:bullet3/build_cmake/src/BulletCollision:bullet3/build_cmake/src/LinearMath:bullet3/build_cmake/src/Bullet3Common:bullet3/build_cmake/src/Bullet3Collision
;

##
## Jam stuff
##

# Fix for unnecessary rebuilding any Jam project
KEEPOBJS = true ; # This doesn't actually fix anything, though it seems like it should
NOARSCAN = true ; # This actually fixes the problem
#AR = ar rUu ; # I was thinking maybe the AR command was wrong (always outputting deterministically)
               # It doesn't seem like this is the problem though
AR = ar cr ;

# Cross compilation
# E.g.
# jam -j4 -q -sCROSS_COMPILE_WINDOWS=true
# if $(CROSS_COMPILE_WINDOWS)
# {
# 	CC = x86_64-w64-mingw32-gcc ;
# 	LINK = x86_64-w64-mingw32-gcc ;
# 	AR = x86_64-w64-mingw32-ar ;
# 	SUFSHR = .dll ;
# }

# Some helpful Jam commands
# -q        : stop on failed target
# -jN       : use N cores
# -sVAR=VAL : Set VAR to VAL. Note that setting WINDOWS=false is the same as setting UNREAL=true,
#              frustratingly
# -dx       : print commands being used
# -n        : don't actually run commands
