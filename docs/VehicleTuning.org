#+TITLE: Tuning a Game Vehicle
/by Macoy Madson/

The following document outlines how to set up and tune a raycast-based 3D vehicle simulation. My focus is on arcade/game-feel simulation rather than realistic simulation, but you'll find a certain degree of realism is necessary to get the right feel.

The nitty gritty physics engine details (collision, impulses, constraint solving, etc.) are out of the scope of this document. I use [[https://github.com/bulletphysics/bullet3/blob/master/src/BulletDynamics/Vehicle][btRaycastVehicle]] from the free and open-source library [[https://github.com/bulletphysics/bullet3][Bullet3]] to obtain a basic working 3D vehicle. Using raycasts for vehicle wheels is an extremely common technique in the game industry, so you can expect other libraries and engines to use similar models.
* Dimensions
First, you should have a vehicle model (including wheels). Scale it based on a human reference so it fits in the rest of the world.

The following parameters are from Bullet3's ~btRaycastVehicle~ module and the provided ~ForkLift~ example.

** Chassis
The chassis is the main mass and collision body of the vehicle. Here are the steps to set it up:

- Decide on your chassis origin. For me, it is the floor of the chassis, in-between both wheels. This will be ~{0.f, 0.f, 0.f}~ in PhysicsVehicle-space
- ~chassisLocalOffset~: I will want to offset the chassis collision shape upwards such that the floor of the chassis is at (0, 0, 0). To do this, measure the distance from the floor of the chassis to the top of the chassis, then half that to get the local transform Y coordinate. This offset does not affect any of the wheel connection points (etc.)
- ~chassisWidth~: You may want to measure from right rear wheel center to left rear wheel center for width of the chassis to approximate wheel collision, and increase balance
- ~chassisHeight~: Measure height from chassis origin to top of chassis
- ~chassisLength~: Measure end to end length
- ~chassisLocalTransform~: Relative to your chassis origin
** Wheel connection points
To set up the wheel variables, follow these steps:

- ~connectionHeight~: Measure the offset between the chassis origin and the top of the rear wheel. This will be the height at which the raycast starts. It is the abolute *highest* the wheels may go
- ~wheelRadius~, ~wheelWidth~: You should be able to measure these in your 3D modeling program
- ~wheelDirectionCS0~: The direction of the wheel raycast from connectionHeight to (suspensionRestLength + wheelRadius). This probably doesn't need to be changed from ~{0.f, -1.f, 0.f}~ unless you're doing something creative
- ~wheelAxleCS~: The Right Axis of your wheels. This probably doesn't need to be changed from ~{-1.f, 0.f, 0.f}~ unless you're doing something creative
** Suspension
- ~suspensionRestLength~: How far the wheel will drift from the hardpoint (~connectionHeight~) when not under load.
This influences the total length of the raycast vector, which is determined as follows:
raycast vector = hardpoint (~connectionHeight~) + ~wheelDirectionCS0~ with magnitide (~suspensionRestLength~ + ~wheelRadius~). The bottom of the wheel starts at the end of the raycast vector, and is the *lowest* the wheels can go
- ~suspensionStiffness~: The force needed to compress a spring is called stiffness (Hooke's Law, ~F = kx~, where ~k~ is the stiffness and ~x~ is the distance). In Bullet, it looks like this: 
#+BEGIN_SRC C
  force = wheel_info.m_suspensionStiffness * length_diff * wheel_info.m_clippedInvContactDotSuspension;
#+END_SRC
More stiffness and less damping gives a very bouncy behavior
- ~suspensionDamping~: Actually ~DampingRelaxation~. Damping removes energy from the springs, eliminating bounce. Each vehicle update, in ~btRaycastVehicle::updateSuspension()~, the suspension force is reduced by ~suspensionDamping~ when the suspension is moving up (relaxing) and ~suspensionCompression~ when moving down (compressing)
- ~suspensionCompression~: Actually ~DampingCompression~. See ~suspensionDamping~
- ~rollInfluence~: Happens in ~btRaycastVehicle::updateFriction()~. Not sure what it is yet
* Powertrain/Drivetrain
The [[https://en.wikipedia.org/wiki/Powertrain][Powertrain]] generates power and delivers it to the wheels.

Here are some terms you need to understand:
- RPM: Revolutions per minute. This is the engine speed, or how fast the crankshaft is rotating per minute
- Throttle: The throttle is usually controlled by a "gas pedal" in cars
- Stalling: An engine which is spinning too slow to continue operating correctly
- Blowing the engine: An engine which is spinning too fast to continue operating correctly. This is not necessarily the official term for this :D
** How powertrains work
*Properly understanding the fundamental operation of powertrains is crucial to confidently implementing this important part of a vehicle simulation.* If you don't understand it yet, do some research and contemplate it for a while before attempting to write any code.

It took me a while thinking about powertrains to actually grok what each component was doing. There were two realizations I had to make.

I had these realizations after mulling over the drivetrain section from ~references/A Vehicle Dynamics Model for Driving Simulators.pdf~, which was an invaluable reference. Read it first before continuing here for the most benefit.

*** Pressing the throttle does not determine engine speed/RPMs
RPM can be imagined as a measurement of the speed of the entire system, but happens to measure the engine speed. The speed of the wheels directly informs RPMs, unless the clutch is engaged.

The throttle can be thought of as a valve, where opening the valve adds more force to the powertrain system, and closing it adds none. 

An internal combustion engine is a machine which converts an explosion (pressure) into linear force by pushing a piston. The piston's connection to the crankshaft converts that linear force into an angular torque, which then goes through the clutch, the gearbox, then the wheels. The throttle says "make more explosive linear energy" but does not necessarily determine how fast the pistons are moving.
*** The engine and wheels are directly connected
The transmission makes the engine torque greater or lessor. However, it does the same for the wheel force sent back to the engine. The systems are not disconnected (unless the clutch is pressed). When compared to a bicycle, the powertrain is a "fixie". 

This means you can't have too large a gear ratio because the force from the wheels is transferred to the engine with that ratio, causing your engine to spin faster than it could support (or, with too low a force, slow enough to choke it out).

** Fundamental Powertrain features
Because I'm creating an arcade vehicle simulation, I shouldn't concern myself with real-world/realistic force values. There are fundamental relationships which must be preserved from the real world in order to get a satisfying arcade simulation.
*** Engine and wheels are connected
The engine speed needs to be determined by the wheel speed, unless:

- The wheels are not in contact with the ground
- The clutch is engaged

The system feeds back into itself this way: the engine adds force to the drivetrain, which sends it to the wheels. The kinetic energy from the chassis is then transferred into the wheels, which send that energy all the way back to the engine.
*** Transmission
The transmission/gearbox provides us with fast acceleration at low speeds, giving the player a more responsive car from a stop. It's especially important to have high acceleration at low speeds when performing a three-point turn, for example, because it is very frustrating otherwise. 

The transmission also gives us the ability to set a top speed via a much lower gear ratio in higher gears. At the highest gear, the powertrain is applying less force to the wheels at high speed, and will eventually reach the speed where the max force output is not enough to beat friction and air resistance
*** Engine speed range 
By selecting a minimum and maximum RPM speed of the engine, the transmission gear ratios follow. At low speeds, a high gear ratio is necessary because too low of speed will stall the engine. This also means the engine applies more force at low speeds, giving better acceleration. 

Having the RPM range established also informs things like automatic shifting, stalling, and blown engines, if those are relevant to the game.
*** Automatic vs. Manual transmissions
Automatics still have the same fundamental powertrain components. The main difference is concerning the clutch: automatics have [[https://en.wikipedia.org/wiki/Automatic_transmission][automatic transmissions]] which are mechanical devices that change gear ratios automatically. From Wikipedia:

="[An automatic transmission] uses a fluid coupling in place of a friction clutch, and accomplishes gear changes by hydraulically locking and unlocking a system of planetary gears."=

Automatics do not stall when idling because the fluid coupling automatically disengages the engine from the rest of the drivetrain. (How? I don't know, but I do want to learn eventually).

For our purposes, we will simulate a manual which shifts instantly (i.e. without the need of engaging the clutch first). It will also automatically shift based on engine speed. This is similar to a [[https://en.wikipedia.org/wiki/Semi-automatic_transmission][Semi-automatic transmission]] (a manual transmission with an automated clutch and gear selection).
** Engine audio
It is important to hook up audio to the engine because it tells the player a lot about the engine's state. It's also really fun. 

The easiest way is to have a very short "blip" sound (procedural or sampled) then pitch shift it based on the engine RPM.

** Tuning the Powertrain
*** Desired forces
Pick a range for how much force you want your engine to output at minimum throttle (0) and maximum throttle (1). For me, I picked ~0.f~ and ~250.f~ mostly arbitrarily as my engine output "torque" range. This is a game without real-world physics, so it doesn't really matter which numbers you choose here.

Determine how much force needs to be delivered to the wheels to get the car to accelerate from a stop. This can be done by powering the vehicle with direct force input. For my 453kg vehicle (a reasonable-sounding weight for a sandrail), a satisfying amount of force from a stop is maxed at 3,750 N (I say Newtons, but again, we are in our own world. I do think it is accurate given my weight is in kilograms and units are in meters). A force that large isn't sustainable for a long time because the car will quickly exceed speed limits which cause tunnelling in the physics engine.


*** Transmission
From the starting force, determine the first gear ratio. This is simple math: given your max engine output force/torque (ours is ~250.f~), map that to your desired output force to the wheels (3,750 N). ~3,750 / 250 = 15~. Gears simply multiply the engine force/torque and deliver the result to the wheels.

Before tuning further, you need to decide on your engine's acceptable RPM range. This is mostly up to you, but it is based on your final gear ratios. I chose a range of ~300~ RPM at idle and ~3000~ RPM at max, which differs from a real-world car, which is more like ~700~ RPM idle and ~7000~ RPM max. Increasing your engine output force lowers your needed transmission ratios, which comes back and changes your engine RPM (TODO: does it raise or lower RPM?).

I have not yet found a method other than intuition and experimentation for determining how many gears you want and what their ratios should be. I chose 4 forward gears (same as Jak 3) with ratios of 15:1, 10:1, 7:1, and 5:1 for 4th gear. Diving deeper into tuning is left as an exercise to the reader.

**** Staying within acceptable engine speeds
Tuning a transmission without knowing that gear ratios should descend in power is not a problem. If you understand the wheel-engine connection, you'll naturally discover that it's the only acceptable way to tune your transmission, because having a higher gear ratio in the next higher gear will cause the engine to spin too quickly, blowing it.

You will also notice that selecting acceptable engine speeds informs the next and previous gears relative to the current one. If the ratios differ too much, the engine will either stall out or blow up when shifting to the gear. Engine speed restrictions naturally enforce wheel speed, so you need to make sure that the wheel speed ranges between gears have some overlap.

If any of your gears result in the engine easily escaping the acceptable RPM range (engine speed), you need to change that gear to a higher ratio (if the engine is stalling) or lower ratio (if the engine is blowing up).

Note that your simulation will not actually have any behavior changes if the engine stalls or blows unless you implement those cases. It will run just fine at one million RPM unless you say that isn't okay. We're not dealing with reality here, but it is informing our simulation.
* Traction, skidding, drifting
This section was assisted by the [[https://raw.githubusercontent.com/Lumak/Urho3D-Offroad-Vehicle/master/Source/Samples/63_OffroadVehicle/Vehicle.cpp][Urho3D Offroad Vehicle listing]].
** Tire model
The tire model facilitates the transfer of forces between the ground and the tires (and by their connection, the chassis). This influences [[https://en.wikipedia.org/wiki/Automobile_handling][vehicle handling]], and is important to simulate.

Fernández (2012) lists several different tire models. Christensen (2019) recommended using the [[https://en.wikipedia.org/wiki/Hans_B._Pacejka#The_Pacejka_%22Magic_Formula%22_tire_models][Pacejka magic formula]], which was implemented in some simplified form for Jak 3's tire model.
** Oversteer and Drifting
The sliding of the rear wheels sideways is formally known as [[https://en.wikipedia.org/wiki/Understeer_and_oversteer][oversteer]], and the intentional use of oversteer is drifting.
** Rolling resistance
I referred to [[https://en.wikipedia.org/wiki/Rolling_resistance][Wikipedia]] for an overview of rolling resistance.
** Stiction: What is it?
I don't know! This section is TODO.
* Suspension tuning
TODO.
Balance between velocity, simulation update rate, and ray lengths.
Ray force is applied purely based on instant distance change, i.e. suspension force isn't taken into account the moment the ray is touching the surface, it's as coarse as how long physics ticks are.
* References
Christensen, C. /(Personal communication, 2019-08-08)./ Email between Macoy Madson (the author), Andy Gavin (co-founder of Naughty Dog, the studio that developed Jak 3), and Christopher Christensen (software engineer of Jak 3's dune buggy system).

Fernández, J. G. (2012): /A Vehicle Dynamics Model for Driving Simulators/. Department of Applied Mechanics,
Division of Vehicle Engineering and Autonomous Systems, Vehicle Dynamics at Chalmers University Of Technology. Göteborg, Sweden.

Marco Monster (2003). /[[https://web.archive.org/web/20040604214333fw_/http://home.planet.nl/~MONSTROUS/tutcar.html][Car Physics for Games]]/. Retrieved 2020-03-15.

[[https://raw.githubusercontent.com/Lumak/Urho3D-Offroad-Vehicle/master/Source/Samples/63_OffroadVehicle/Vehicle.cpp][Urho3D Offroad Vehicle]]. /Urho3D game engine/. MIT License. Retrieved 2020-02-20.

/[[https://dskjal.com/car/car-physics-for-simulator.html][シミュレータのための自動車物理]]/. Retrieved 2020-03-15.
