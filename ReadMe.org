#+TITLE: Spargus Vehicle Prototype

This is a 3D vehicle game prototype inspired by the gameplay and feel of the dune buggies in [[https://en.wikipedia.org/wiki/Jak_3][Jak 3]].

** Videos
Progress videos, newest to oldest:
- [[https://youtu.be/oFrNrme3Kp4][Development tools]], featuring [[https://github.com/ocornut/imgui][dear ImGui]] integration
- [[https://www.youtube.com/watch?v=c43dq7xYvuA][Split-screen and better "AI"]] (the top screen is the AI follower)
- [[https://www.youtube.com/watch?v=LXAsL04EPDY][First "AI" driver]]. WIP Procedural terrain can be seen in the far background
- [[https://www.youtube.com/watch?v=JNJRJw6R5xY][Drivetrain and engine audio]]
- [[https://www.youtube.com/watch?v=bCw-OMBP5XU][Objective system and audio]], plus improved camera and skybox
- [[https://www.youtube.com/watch?v=QOJyhaOVrkg][First video of air control]] (applying arbitrary torque to the car in-air)
- [[https://youtu.be/HvuRNYoSGKU][First public video]], featuring free cam and time step scaling

I created a [[https://www.youtube.com/watch?v=sUenByjCijM][reference video]] so I could emulate the Jak 3 behavior. It gives you an idea what the inspiration and goal behavior is

** Setup
*** Clone repository
Clone and init submodules for dependencies:

#+BEGIN_SRC sh
git clone --recurse-submodules https://github.com/makuto/spargus-vehicle-prototype
#+END_SRC

*** Set up build system
Jam is used to build the project. Install Jam:

#+BEGIN_SRC sh
sudo apt install jam
#+END_SRC

You will also need [[https://www.blender.org/download/][Blender 2.8]] to build the 3D assets. For Ubuntu, 2.8 is not yet in the repository, so you should download it directly.

If you have a system install of Blender which is ~<2.8~, you need to add ~sBLENDER=/path/to/blender2.8~ to ~Build.sh~ and ~Build_Debug.sh~ ~jam~ invocations.

*** Build dependencies
Spargus uses several libraries:

- *Bullet 3*: Physics, raycast vehicle
- *SFML*: 2D graphics, debug 3D graphics, audio, input, window
- *Horde3D*: 3D graphics
- *dear ImGui*: Debug GUI/editors
- *glm*: Math
- *tinyobjloader*: .obj loading, for collision meshes
- *tracy*: Profiling

Currently, SFML relies on system installs for its dependencies:

#+BEGIN_SRC sh
sudo apt install libopenal-dev libvorbis-dev libflac-dev libglew
#+END_SRC

Build the rest of the dependencies from source:

#+BEGIN_SRC sh
cd spargus-vehicle-prototype
./BuildDependencies.sh
#+END_SRC

**** Building with Debug symbols

#+BEGIN_SRC sh
./BuildDependencies_Debug.sh
#+END_SRC
*** Build Spargus
Finally, build Spargus. This builds both code and data assets.

#+BEGIN_SRC sh
./Build.sh
#+END_SRC

**** Building with Debug symbols

#+BEGIN_SRC sh
./Build_Debug.sh
#+END_SRC

*** Run Spargus
~spargus_vehicle_prototype~ should be run in the root directory of the repository.
** Dependency notes
*** SFML Setup
SFML is used for graphics, window, and input. I used my old [[https://github.com/makuto/base2.0][base2.0]] library to wrap SFML if I ever want to switch to SDL.

Running ~BuildDependencies.sh~ will build base2.0, which builds SFML from source. Currently, SFML relies on system installs for its dependencies:

#+BEGIN_SRC sh
sudo apt install libopenal-dev libvorbis-dev libflac-dev libglew
#+END_SRC

*** Bullet3 Setup
Spargus Vehicle Prototype uses [[https://github.com/bulletphysics/bullet3][Bullet3]] for physics.

Build bullet3:
#+BEGIN_SRC sh
cd spargus-vehicle-prototype
./BuildDependencies.sh
#+END_SRC

/Optional:/ Test the examples:

#+BEGIN_SRC sh
./Dependencies/bullet3/build_cmake/examples/ExampleBrowser/App_ExampleBrowser
#+END_SRC
** Asset pipeline
*** Create the asset in your desired modeling program
*** Add the asset to the Jamfile
*** Add textures to Jamfile
*** Run ~jam~
This will build the assets only if necessary.
*** By hand: Export Collada and Wavefront Obj
Collada is used by Horde3D to display the mesh, while the Obj is used to create the collision mesh. The meshes can differ if desired (e.g. for a low-poly collision mesh).
On export, ensure *Triangulate Mesh* and *Apply Modifiers* are checked.

** Supporting programs
It takes many programs to make a game. This list serves as a working set of everything needed to create Spargus (with the exception of low-level operating system etc.).

Versions are in Italics. They indicate the last working version I used. It is not necessarily required to have the exact same version.

*** Asset creation
In order to create models, textures, and audio effectively, you need the following programs:

- [[https://www.gimp.org/][GIMP]] /(2.8.22)/: Textures are created in GIMP and stored in GIMP's ~.xcf~ format
- [[https://www.blender.org/][Blender]] /2.82/: Models and animations are created and stored in ~.blend~. Make sure Collada ~.dae~ and Wavefront ~.obj~ exporting are enabled
- [[https://www.audacityteam.org/][Audacity]]: Audio creation/editing
*** Toolchain
Source to executable toolchain (Linux x86_64):

- [[https://clang.llvm.org/docs/ClangFormat.html][ClangFormat]] /6.0.0-1/: Code format
- [[https://swarm.workshop.perforce.com/projects/perforce_software-jam/][Jam]] /2.6/: Build system. Builds both code and assets
- [[https://clang.llvm.org/][clang++]] /6.0.0-1/: C++ compiler/linker
- [[https://ftp.gnu.org/old-gnu/Manuals/binutils-2.12/html_chapter/binutils_1.html][GNU ar]] /2.30/: Library archive creation (e.g. ~.a~)
- [[https://cmake.org/][CMake]] /3.10.2/: Dependency project generation (Spargus itself does not use CMake)

*** Runtime tools
These tools aren't necessary for creating assets, building or running the game, but they are useful for inspecting the game as it is running.

- [[https://bitbucket.org/wolfpld/tracy/src][tracy]] /Feb 2020/: Used for profiling runtime performance
- [[https://renderdoc.org/][Renderdoc]] /1.5/: GPU debugging

Some of these are included in the ~Dependencies~ directory.

