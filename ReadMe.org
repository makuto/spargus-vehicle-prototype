* Spargus Vehicle Prototype
This is a 3D vehicle game prototype inspired by the gameplay and feel of the dune buggies in [[https://en.wikipedia.org/wiki/Jak_3][Jak 3]].

I created a [[https://www.youtube.com/watch?v=sUenByjCijM][reference video]] so I could emulate the Jak 3 behavior. It gives you an idea what I'm going for.

Here is a [[https://youtu.be/HvuRNYoSGKU][preview of the prototype]]. It is extremely rough currently.

** Setup
Clone and init submodules for dependencies:

#+BEGIN_SRC sh
git clone --recurse-submodules https://github.com/makuto/spargus-vehicle-prototype
#+END_SRC

Jam is used to build the project. Install Jam:
#+BEGIN_SRC sh
sudo apt install jam
#+END_SRC

Build dependencies:
#+BEGIN_SRC sh
cd spargus-vehicle-prototype
./BuildDependencies.sh
#+END_SRC

Build Spargus:
#+BEGIN_SRC sh
./Build.sh
#+END_SRC

For Debug:
#+BEGIN_SRC sh
./Build_Debug.sh
#+END_SRC

~spargus_vehicle_prototype~ should be run in the root directory of the repository.

*** SFML Setup
SFML is used for graphics, window, and input. I used my old [[https://github.com/makuto/base2.0][base2.0]] library to wrap SFML if I ever want to switch to SDL (I should dump base2.0 eventually...) 

Running ~BuildDependencies.sh~ will build base2.0. You will need to have installed SFML 2 already. (*TODO:* Add instructions on how to do this)

*** Bullet3 Setup
Spargus Vehicle Prototype uses [[https://github.com/bulletphysics/bullet3][Bullet3]] for physics.

Build bullet3:
#+BEGIN_SRC sh
cd spargus-vehicle-prototype
./BuildDependencies.sh
#+END_SRC

/Optional:/ Test the examples:

#+BEGIN_SRC sh
./bullet3/build_cmake/examples/ExampleBrowser/App_ExampleBrowser
#+END_SRC

** Asset pipeline
*** Create the asset in your desired modeling program
*** Run ~BuildAssets.sh~
This prepares assets for Horde3D.
*** By hand: Export Collada and Wavefront Obj
Collada is used by Horde3D to display the mesh, while the Obj is used to create the collision mesh. The meshes can differ if desired (e.g. for a low-poly collision mesh).
On export, ensure *Triangulate Mesh* and *Apply Modifiers* are checked.
